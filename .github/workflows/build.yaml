name: Build & Deploy
on:
  push:
    tags:
      - v*
env:
  PY_COLORS: "1"
  GOTRACEBACK: crash
  GO111MODULE: auto

jobs:
  # build_wheels:
  #   name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         # Linux 64 bit manylinux2014
  #         - os: ubuntu-latest
  #           python: 39
  #           platform_id: manylinux_x86_64
  #           manylinux_image: manylinux2014

  #         - os: ubuntu-latest
  #           python: 310
  #           platform_id: manylinux_x86_64
  #           manylinux_image: manylinux2014

  #         - os: ubuntu-latest
  #           python: 311
  #           platform_id: manylinux_x86_64
  #           manylinux_image: manylinux2014
  #         - os: ubuntu-latest
  #           python: 312
  #           platform_id: manylinux_x86_64
  #           manylinux_image: manylinux2014
  #         - os: ubuntu-latest
  #           python: 313
  #           platform_id: manylinux_x86_64
  #           manylinux_image: manylinux2014
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.11"

  #   - name: Set tag name as environment variable
  #     run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

  #   - name: Install cibuildwheel
  #     run: python -m pip install cibuildwheel==2.16.2

  #   - name: Build wheels
  #     env:
  #       CIBW_BUILD: cp${{ matrix.python }}*
  #       CIBW_ARCHS: "auto64"
  #       CIBW_SKIP: "*-musllinux*" # Skip musllinux builds
  #       CIBW_BEFORE_ALL: |
  #         curl -OL https://go.dev/dl/go1.22.0.linux-amd64.tar.gz
  #         rm -rf /usr/local/go
  #         tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz
  #         export PATH=$PATH:/usr/local/go/bin
  #         go version
  #       CIBW_BEFORE_BUILD: |
  #         export PATH=$PATH:/usr/local/go/bin
  #         export GOPATH=/root/go
  #         export PATH=$PATH:$GOPATH/bin
  #         export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
  #         go install github.com/go-python/gopy@v0.4.10
  #         go install golang.org/x/tools/cmd/goimports@latest
  #         go mod download
  #         go mod verify
  #         rm -rf ./py_excel_form_extractor ./py_excel_form_extractor.egg-info
  #         gopy build --output=py_excel_form_extractor -vm=python3 ./pkg/*
  #       CIBW_ENVIRONMENT: >
  #         PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
  #         GOPATH=/root/go
  #       PACKAGE_VERSION: ${{ env.RELEASE_VERSION }}
  #       CIBW_BUILD_VERBOSITY: 3 # Add verbose output
  #     run: python -m cibuildwheel --output-dir wheelhouse

  #   - uses: actions/upload-artifact@v4
  #     with:
  #       path: ./wheelhouse/*.whl
  #       overwrite: true
  build_linux_x86_64:
    # if: false
    name: Linux 310,311 x86_64
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: copy setup.py
        run: cp setup_ci.py setup.py

      - name: Set Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        env:
          CIBW_BUILD: "cp3*_x86_64"
          CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* *-musllinux_x86_64"
          CIBW_ARCHS: "native"
          CIBW_ENVIRONMENT: "PATH=$PATH:/usr/local/go/bin RELEASE_VERSION=${RELEASE_VERSION}"
          CIBW_ENVIRONMENT_PASS_LINUX: "RELEASE_VERSION"
          CIBW_BEFORE_ALL_LINUX: |
            curl -o go.tar.gz https://dl.google.com/go/go1.22.9.linux-amd64.tar.gz
            tar -C /usr/local -xzf go.tar.gz
            pip install loguru
            go install github.com/go-python/gopy@v0.4.10
            go install golang.org/x/tools/cmd/goimports@latest
          # RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          CIBW_BUILD_VERBOSITY: 3 # Add verbose output

      - name: Upload atifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-amd64
          path: ./wheelhouse/*.whl

  publish:
    name: Publish PyPI
    needs: [build_linux_x86_64]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist
      - name: Collect all wheels
        run: |
          ls -R
          mkdir dist
          for f in $(find . -type f -name '*.whl'); do mv ${f} dist; done;
          ls -R dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./dist
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          print-hash: true
